package controller.orderManagmentController.PlaceOrderController;

import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXTextField;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.stage.Stage;
import model.Order;
import java.net.URL;
import java.sql.Date;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ResourceBundle;

public class PlaceOrderFormController implements Initializable {
    PlaceOrderFormService placeOrderFormService = new PlaceOrderController();
    @FXML
    private JFXButton btnCancel;
    @FXML
    private JFXButton btnPlaceOrder;
    @FXML
    private JFXTextField txtCustomerId;
    @FXML
    private JFXTextField txtOrderDate;
    @FXML
    private JFXTextField txtOrderId;

    private Runnable onOrderPlacedCallback;

    public void setOnOrderPlaced(Runnable callback) {
        this.onOrderPlacedCallback = callback;
    }



    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
//          ---------- Set the auto generated date.
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String today = LocalDate.now().format(formatter);
        txtOrderDate.setText(today);

//           ---------- Set the auto generated Order ID.
        String autoGeneratedOrderID = placeOrderFormService.orderIDAutoGenerate();
        txtOrderId.setText(autoGeneratedOrderID);


    }

    @FXML
    void btnCancelOnAction(ActionEvent event) {

    }

    @FXML
    void btnPlaceOrderOnAction(ActionEvent event) {
        String enteredOrderId  = txtOrderId.getText().trim();
        String enteredCustomerId  = txtCustomerId.getText().trim();

        if (enteredOrderId.isEmpty()) {
            showAlert("Order ID cannot be empty!");
            return;
        }

        // Check if Order ID exists in database
        else if(placeOrderFormService.isOrderIdExists(enteredOrderId)){
            showAlert("Order ID" +  enteredOrderId + "already exists!. Please choose another ID.");
            return;
        }else {
            // Check if Customer ID exists in database
            if (placeOrderFormService.isCustomerExists(enteredCustomerId)) {
                String orderId = txtOrderId.getText().trim();
                Date orderDate = Date.valueOf((txtOrderDate.getText().trim()));
                String CustID = txtCustomerId.getText().trim();

                Order order = new Order(
                    txtOrderId.getText().trim(),
                    Date.valueOf((txtOrderDate.getText().trim())),
                    txtCustomerId.getText().trim()
                );

                placeOrderFormService.placeOrder(order);

                showAlert("Order placed successfully");

                if (onOrderPlacedCallback != null) {
                    onOrderPlacedCallback.run();
                }

                // Close this window
                Stage stage = (Stage) btnPlaceOrder.getScene().getWindow();
                stage.close();

            }else {
                showAlert("Customer ID does not exist in the system!");
                return;
            }
        }
    }

    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Warning");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
